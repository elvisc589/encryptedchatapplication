{"ast":null,"code":"// Node.js core modules\nvar crypto = require('crypto');\n\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\nvar CIPHER_ALGORITHM = 'aes-256-ctr';\n\n//\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\nvar aes256 = {\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function (key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n    if (!(isString || isBuffer) || isString && !input || isBuffer && !Buffer.byteLength(input)) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    // Initialization Vector\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var buffer = input;\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n    return encrypted;\n  },\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function (key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n    if (!(isString || isBuffer) || isString && !encrypted || isBuffer && !Buffer.byteLength(encrypted)) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n    var input = encrypted;\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    }\n\n    // Initialization Vector\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var ciphertext = input.slice(16);\n    var output;\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n    return output;\n  }\n};\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n  Object.defineProperty(this, 'key', {\n    value: key\n  });\n}\n\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\nAesCipher.prototype.encrypt = function (plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\nAesCipher.prototype.decrypt = function (encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n};\n\n//\n// API Extension\n//\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\naes256.createCipher = function (key) {\n  return new AesCipher(key);\n};\n\n//\n// Export the API\n//\n\nmodule.exports = aes256;","map":{"version":3,"names":["crypto","require","CIPHER_ALGORITHM","aes256","encrypt","key","input","TypeError","isString","isBuffer","Buffer","byteLength","sha256","createHash","update","iv","randomBytes","cipher","createCipheriv","digest","buffer","from","ciphertext","encrypted","concat","final","toString","decrypt","length","slice","decipher","createDecipheriv","output","AesCipher","Object","defineProperty","value","prototype","plaintext","createCipher","module","exports"],"sources":["/Users/elvischiqui/Desktop/e2e-encrypted-chatapp/frontend/node_modules/aes256/index.js"],"sourcesContent":["// Node.js core modules\nvar crypto = require('crypto');\n\n\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\nvar CIPHER_ALGORITHM = 'aes-256-ctr';\n\n\n//\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\nvar aes256 = {\n\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function(key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n    if (!(isString || isBuffer) || (isString && !input) || (isBuffer && !Buffer.byteLength(input))) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    // Initialization Vector\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var buffer = input;\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function(key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n    if (!(isString || isBuffer) || (isString && !encrypted) || (isBuffer && !Buffer.byteLength(encrypted))) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    var input = encrypted;\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    }\n\n    // Initialization Vector\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var ciphertext = input.slice(16);\n\n    var output;\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n\n    return output;\n  }\n\n};\n\n\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n  Object.defineProperty(this, 'key', { value: key });\n\n}\n\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\nAesCipher.prototype.encrypt = function(plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\nAesCipher.prototype.decrypt = function(encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n};\n\n\n\n\n//\n// API Extension\n//\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\naes256.createCipher = function(key) {\n  return new AesCipher(key);\n};\n\n\n\n\n//\n// Export the API\n//\n\nmodule.exports = aes256;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}