{"ast":null,"code":"var _jsxFileName = \"/Users/elvischiqui/Desktop/e2e-encrypted-chatapp/frontend/src/components/Chatbox.jsx\",\n  _s = $RefreshSig$();\nimport { to_Decrypt, to_Encrypt } from \"../aes.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  username,\n  roomname,\n  socket\n}) {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const dispatchProcess = (encrypt, msg, cipher) => {\n    // Your process logic here, for example:\n    console.log(\"Encrypt:\", encrypt, \"Message:\", msg, \"Cipher:\", cipher);\n  };\n  useEffect(() => {\n    const handleIncomingMessage = data => {\n      // Decrypt the incoming message\n      const ans = to_Decrypt(data.text, data.username);\n\n      // Dispatch the process logic (replace with your logic)\n      dispatchProcess(false, ans, data.text);\n\n      // Update the messages state with the new message\n      setMessages(prevMessages => [...prevMessages, {\n        userId: data.userId,\n        username: data.username,\n        text: ans\n      }]);\n    };\n\n    // Attach the event listener for incoming messages\n    socket.on(\"message\", handleIncomingMessage);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      socket.off(\"message\", handleIncomingMessage);\n    };\n  }, [socket]); // Depend only on socket for the useEffect\n\n  const sendData = () => {\n    if (text.trim() !== \"\") {\n      // Encrypt the message\n      const ans = to_Encrypt(text);\n\n      // Emit the encrypted message via socket\n      socket.emit(\"chat\", ans);\n\n      // Clear the input field\n      setText(\"\");\n    }\n  };\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    // Scroll to the bottom of the chat messages when messages change\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); // Depend on messages for scrolling\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-name\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [username, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \"0.7rem\"\n          },\n          children: [\"in \", roomname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message\",\n      children: [messages.map((i, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message${i.username === username ? \"\" : \" mess-right\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: i.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: i.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"enter your message\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        onKeyPress: e => {\n          if (e.key === \"Enter\") {\n            sendData();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendData,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"HOZAuVicutE7kHuMO7If7mHVKC8=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["to_Decrypt","to_Encrypt","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","username","roomname","socket","_s","text","setText","messages","setMessages","dispatchProcess","encrypt","msg","cipher","console","log","handleIncomingMessage","data","ans","prevMessages","userId","on","off","sendData","trim","emit","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","map","i","index","ref","placeholder","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/Users/elvischiqui/Desktop/e2e-encrypted-chatapp/frontend/src/components/Chatbox.jsx"],"sourcesContent":["import { to_Decrypt, to_Encrypt } from \"../aes.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction Chat({ username, roomname, socket }) {\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const dispatchProcess = (encrypt, msg, cipher) => {\n    // Your process logic here, for example:\n    console.log(\"Encrypt:\", encrypt, \"Message:\", msg, \"Cipher:\", cipher);\n  };\n\n  useEffect(() => {\n    const handleIncomingMessage = (data) => {\n      // Decrypt the incoming message\n      const ans = to_Decrypt(data.text, data.username);\n\n      // Dispatch the process logic (replace with your logic)\n      dispatchProcess(false, ans, data.text);\n\n      // Update the messages state with the new message\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          userId: data.userId,\n          username: data.username,\n          text: ans,\n        },\n      ]);\n    };\n\n    // Attach the event listener for incoming messages\n    socket.on(\"message\", handleIncomingMessage);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      socket.off(\"message\", handleIncomingMessage);\n    };\n  }, [socket]); // Depend only on socket for the useEffect\n\n  const sendData = () => {\n    if (text.trim() !== \"\") {\n      // Encrypt the message\n      const ans = to_Encrypt(text);\n\n      // Emit the encrypted message via socket\n      socket.emit(\"chat\", ans);\n\n      // Clear the input field\n      setText(\"\");\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat messages when messages change\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]); // Depend on messages for scrolling\n\n  return (\n    <div className=\"chat\">\n      <div className=\"user-name\">\n        <h2>\n          {username} <span style={{ fontSize: \"0.7rem\" }}>in {roomname}</span>\n        </h2>\n      </div>\n      <div className=\"chat-message\">\n        {messages.map((i, index) => (\n          <div key={index} className={`message${i.username === username ? \"\" : \" mess-right\"}`}>\n            <p>{i.text}</p>\n            <span>{i.username}</span>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"send\">\n        <input\n          placeholder=\"enter your message\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              sendData();\n            }\n          }}\n        />\n        <button onClick={sendData}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}