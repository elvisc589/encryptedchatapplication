{"ast":null,"code":"//file aes.js which is responsible for the encryption\n//of outgoing messages and decryption of incoming messages by the use of the same secret key,\n// as below:\nvar aes256 = require(\"aes256\");\n\n//the secret key used for encrypting and decrypting messages, just for easy demostration, I put secret key here, otherwise put it in .env file\nvar secret_key = \"uI2ooxtwHeI6q69PS98fx9SWVGbpQohO\";\n\n//returns the encrypted text\nexport const to_Encrypt = text => {\n  var encrypted = aes256.encrypt(secret_key, text);\n  return encrypted;\n};\n\n//welcome message is not decrypted\nexport const to_Decrypt = (cipher, username) => {\n  if (cipher.startsWith(\"Welcome\")) {\n    return cipher;\n  }\n  if (cipher.startsWith(username)) {\n    return cipher;\n  }\n\n  //  //decryped message is returned\n  var decrypted = aes256.decrypt(secret_key, cipher);\n  return decrypted;\n};\n\n//In the code above, I imported aes256 from the aes module\n// and wrote the functions where the incoming encrypted message is decrypted\n//and outgoing message is encrypted.\n\n//Ofcourse the welcome user message is not to be encrypted.","map":{"version":3,"names":["aes256","require","secret_key","to_Encrypt","text","encrypted","encrypt","to_Decrypt","cipher","username","startsWith","decrypted","decrypt"],"sources":["/Users/elvischiqui/Desktop/e2e-encrypted-chatapp/frontend/src/aes.js"],"sourcesContent":["//file aes.js which is responsible for the encryption\n//of outgoing messages and decryption of incoming messages by the use of the same secret key,\n// as below:\nvar aes256 = require(\"aes256\");\n\n//the secret key used for encrypting and decrypting messages, just for easy demostration, I put secret key here, otherwise put it in .env file\nvar secret_key = \"uI2ooxtwHeI6q69PS98fx9SWVGbpQohO\";\n\n//returns the encrypted text\nexport const to_Encrypt = (text) => {\n  var encrypted = aes256.encrypt(secret_key, text);\n  return encrypted;\n};\n\n//welcome message is not decrypted\nexport const to_Decrypt = (cipher, username) => {\n  if (cipher.startsWith(\"Welcome\")) {\n    return cipher;\n  }\n\n  if (cipher.startsWith(username)) {\n    return cipher;\n  }\n\n  //  //decryped message is returned\n  var decrypted = aes256.decrypt(secret_key, cipher);\n  return decrypted;\n};\n\n//In the code above, I imported aes256 from the aes module\n// and wrote the functions where the incoming encrypted message is decrypted\n//and outgoing message is encrypted.\n\n//Ofcourse the welcome user message is not to be encrypted."],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA,IAAIC,UAAU,GAAG,kCAAkC;;AAEnD;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAClC,IAAIC,SAAS,GAAGL,MAAM,CAACM,OAAO,CAACJ,UAAU,EAAEE,IAAI,CAAC;EAChD,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EAC9C,IAAID,MAAM,CAACE,UAAU,CAAC,SAAS,CAAC,EAAE;IAChC,OAAOF,MAAM;EACf;EAEA,IAAIA,MAAM,CAACE,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC/B,OAAOD,MAAM;EACf;;EAEA;EACA,IAAIG,SAAS,GAAGX,MAAM,CAACY,OAAO,CAACV,UAAU,EAAEM,MAAM,CAAC;EAClD,OAAOG,SAAS;AAClB,CAAC;;AAED;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}